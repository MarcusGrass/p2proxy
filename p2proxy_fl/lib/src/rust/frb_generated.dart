// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/endpoint.dart';
import 'api/tokens.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSetupInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1417215143;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_p2proxy_fl',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  void crateApiEndpointInitializedEndpointCancelStream({
    required InitializedEndpoint that,
  });

  Future<InitializedEndpoint> crateApiEndpointInitializedEndpointCreate({
    required UserDefinedKey key,
  });

  Future<void> crateApiEndpointInitializedEndpointDestroy({
    required InitializedEndpoint that,
  });

  Future<PlatformInt64> crateApiEndpointInitializedEndpointExecPing({
    required InitializedEndpoint that,
    required UserDefinedNode address,
  });

  Stream<String> crateApiEndpointInitializedEndpointServeRemoteTcp({
    required InitializedEndpoint that,
    required int port,
    required UserDefinedNode address,
    String? namedPort,
  });

  Future<(String, List<UserDefinedKey>)>
  crateApiTokensUserDefinedKeyAddAndSerialize({
    required List<UserDefinedKey> many,
    required UserDefinedKey tgt,
  });

  Future<List<UserDefinedKey>> crateApiTokensUserDefinedKeyDeserializeMany({
    required String s,
  });

  String crateApiTokensUserDefinedKeyDisplayLabel({
    required UserDefinedKey that,
  });

  String crateApiTokensUserDefinedKeyGenerateKey();

  String crateApiTokensUserDefinedKeyPrivateKeyHex({
    required UserDefinedKey that,
  });

  String crateApiTokensUserDefinedKeyPublicKeyHex({
    required UserDefinedKey that,
  });

  Future<(String?, List<UserDefinedKey>)>
  crateApiTokensUserDefinedKeyRemoveAndSerializeIfPresent({
    required List<UserDefinedKey> many,
    required UserDefinedKey tgt,
  });

  UserDefinedKey crateApiTokensUserDefinedKeyTryNew({
    required String rawHex,
    String? name,
  });

  Future<(String, List<UserDefinedNode>)>
  crateApiTokensUserDefinedNodeAddAndSerialize({
    required List<UserDefinedNode> many,
    required UserDefinedNode tgt,
  });

  String crateApiTokensUserDefinedNodeAddress({required UserDefinedNode that});

  Future<List<UserDefinedNode>> crateApiTokensUserDefinedNodeDeserializeMany({
    required String s,
  });

  String crateApiTokensUserDefinedNodeDisplayLabel({
    required UserDefinedNode that,
  });

  Future<(String?, List<UserDefinedNode>)>
  crateApiTokensUserDefinedNodeRemoveAndSerializeIfPresent({
    required List<UserDefinedNode> many,
    required UserDefinedNode tgt,
  });

  UserDefinedNode crateApiTokensUserDefinedNodeTryNew({
    required String nodeId,
    String? name,
  });

  Future<void> crateApiSetupInitApp();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InitializedEndpoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InitializedEndpoint;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_InitializedEndpointPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_UserDefinedKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_UserDefinedKey;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_UserDefinedKeyPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_UserDefinedNode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_UserDefinedNode;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_UserDefinedNodePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  void crateApiEndpointInitializedEndpointCancelStream({
    required InitializedEndpoint that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointInitializedEndpointCancelStreamConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointInitializedEndpointCancelStreamConstMeta =>
      const TaskConstMeta(
        debugName: "InitializedEndpoint_cancel_stream",
        argNames: ["that"],
      );

  @override
  Future<InitializedEndpoint> crateApiEndpointInitializedEndpointCreate({
    required UserDefinedKey key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            key,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiEndpointInitializedEndpointCreateConstMeta,
        argValues: [key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointInitializedEndpointCreateConstMeta =>
      const TaskConstMeta(
        debugName: "InitializedEndpoint_create",
        argNames: ["key"],
      );

  @override
  Future<void> crateApiEndpointInitializedEndpointDestroy({
    required InitializedEndpoint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiEndpointInitializedEndpointDestroyConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointInitializedEndpointDestroyConstMeta =>
      const TaskConstMeta(
        debugName: "InitializedEndpoint_destroy",
        argNames: ["that"],
      );

  @override
  Future<PlatformInt64> crateApiEndpointInitializedEndpointExecPing({
    required InitializedEndpoint that,
    required UserDefinedNode address,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
            address,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_64,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiEndpointInitializedEndpointExecPingConstMeta,
        argValues: [that, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEndpointInitializedEndpointExecPingConstMeta =>
      const TaskConstMeta(
        debugName: "InitializedEndpoint_exec_ping",
        argNames: ["that", "address"],
      );

  @override
  Stream<String> crateApiEndpointInitializedEndpointServeRemoteTcp({
    required InitializedEndpoint that,
    required int port,
    required UserDefinedNode address,
    String? namedPort,
  }) {
    final sink = RustStreamSink<String>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
              that,
              serializer,
            );
            sse_encode_i_32(port, serializer);
            sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
              address,
              serializer,
            );
            sse_encode_opt_String(namedPort, serializer);
            sse_encode_StreamSink_String_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 5,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_String,
          ),
          constMeta:
              kCrateApiEndpointInitializedEndpointServeRemoteTcpConstMeta,
          argValues: [that, port, address, namedPort, sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta
  get kCrateApiEndpointInitializedEndpointServeRemoteTcpConstMeta =>
      const TaskConstMeta(
        debugName: "InitializedEndpoint_serve_remote_tcp",
        argNames: ["that", "port", "address", "namedPort", "sink"],
      );

  @override
  Future<(String, List<UserDefinedKey>)>
  crateApiTokensUserDefinedKeyAddAndSerialize({
    required List<UserDefinedKey> many,
    required UserDefinedKey tgt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            many,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            tgt,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiTokensUserDefinedKeyAddAndSerializeConstMeta,
        argValues: [many, tgt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedKeyAddAndSerializeConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_add_and_serialize",
        argNames: ["many", "tgt"],
      );

  @override
  Future<List<UserDefinedKey>> crateApiTokensUserDefinedKeyDeserializeMany({
    required String s,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(s, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiTokensUserDefinedKeyDeserializeManyConstMeta,
        argValues: [s],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedKeyDeserializeManyConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_deserialize_many",
        argNames: ["s"],
      );

  @override
  String crateApiTokensUserDefinedKeyDisplayLabel({
    required UserDefinedKey that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiTokensUserDefinedKeyDisplayLabelConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedKeyDisplayLabelConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_display_label",
        argNames: ["that"],
      );

  @override
  String crateApiTokensUserDefinedKeyGenerateKey() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiTokensUserDefinedKeyGenerateKeyConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedKeyGenerateKeyConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_generate_key",
        argNames: [],
      );

  @override
  String crateApiTokensUserDefinedKeyPrivateKeyHex({
    required UserDefinedKey that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiTokensUserDefinedKeyPrivateKeyHexConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedKeyPrivateKeyHexConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_private_key_hex",
        argNames: ["that"],
      );

  @override
  String crateApiTokensUserDefinedKeyPublicKeyHex({
    required UserDefinedKey that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiTokensUserDefinedKeyPublicKeyHexConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedKeyPublicKeyHexConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_public_key_hex",
        argNames: ["that"],
      );

  @override
  Future<(String?, List<UserDefinedKey>)>
  crateApiTokensUserDefinedKeyRemoveAndSerializeIfPresent({
    required List<UserDefinedKey> many,
    required UserDefinedKey tgt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            many,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
            tgt,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiTokensUserDefinedKeyRemoveAndSerializeIfPresentConstMeta,
        argValues: [many, tgt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiTokensUserDefinedKeyRemoveAndSerializeIfPresentConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_remove_and_serialize_if_present",
        argNames: ["many", "tgt"],
      );

  @override
  UserDefinedKey crateApiTokensUserDefinedKeyTryNew({
    required String rawHex,
    String? name,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rawHex, serializer);
          sse_encode_opt_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiTokensUserDefinedKeyTryNewConstMeta,
        argValues: [rawHex, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedKeyTryNewConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedKey_try_new",
        argNames: ["rawHex", "name"],
      );

  @override
  Future<(String, List<UserDefinedNode>)>
  crateApiTokensUserDefinedNodeAddAndSerialize({
    required List<UserDefinedNode> many,
    required UserDefinedNode tgt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
            many,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
            tgt,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiTokensUserDefinedNodeAddAndSerializeConstMeta,
        argValues: [many, tgt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedNodeAddAndSerializeConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedNode_add_and_serialize",
        argNames: ["many", "tgt"],
      );

  @override
  String crateApiTokensUserDefinedNodeAddress({required UserDefinedNode that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiTokensUserDefinedNodeAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedNodeAddressConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedNode_address",
        argNames: ["that"],
      );

  @override
  Future<List<UserDefinedNode>> crateApiTokensUserDefinedNodeDeserializeMany({
    required String s,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(s, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiTokensUserDefinedNodeDeserializeManyConstMeta,
        argValues: [s],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedNodeDeserializeManyConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedNode_deserialize_many",
        argNames: ["s"],
      );

  @override
  String crateApiTokensUserDefinedNodeDisplayLabel({
    required UserDefinedNode that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiTokensUserDefinedNodeDisplayLabelConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedNodeDisplayLabelConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedNode_display_label",
        argNames: ["that"],
      );

  @override
  Future<(String?, List<UserDefinedNode>)>
  crateApiTokensUserDefinedNodeRemoveAndSerializeIfPresent({
    required List<UserDefinedNode> many,
    required UserDefinedNode tgt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
            many,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
            tgt,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiTokensUserDefinedNodeRemoveAndSerializeIfPresentConstMeta,
        argValues: [many, tgt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiTokensUserDefinedNodeRemoveAndSerializeIfPresentConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedNode_remove_and_serialize_if_present",
        argNames: ["many", "tgt"],
      );

  @override
  UserDefinedNode crateApiTokensUserDefinedNodeTryNew({
    required String nodeId,
    String? name,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(nodeId, serializer);
          sse_encode_opt_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiTokensUserDefinedNodeTryNewConstMeta,
        argValues: [nodeId, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTokensUserDefinedNodeTryNewConstMeta =>
      const TaskConstMeta(
        debugName: "UserDefinedNode_try_new",
        argNames: ["nodeId", "name"],
      );

  @override
  Future<void> crateApiSetupInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSetupInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSetupInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InitializedEndpoint =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InitializedEndpoint =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_UserDefinedKey =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_UserDefinedKey =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_UserDefinedNode =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_UserDefinedNode =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  InitializedEndpoint
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InitializedEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserDefinedKey
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserDefinedKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserDefinedNode
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserDefinedNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InitializedEndpoint
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InitializedEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserDefinedKey
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserDefinedKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserDefinedNode
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserDefinedNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InitializedEndpoint
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InitializedEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserDefinedKey
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserDefinedKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UserDefinedNode
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UserDefinedNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<UserDefinedKey>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey,
        )
        .toList();
  }

  @protected
  List<UserDefinedNode>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode,
        )
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  (String?, List<UserDefinedKey>)
  dco_decode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_String(arr[0]),
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
        arr[1],
      ),
    );
  }

  @protected
  (String?, List<UserDefinedNode>)
  dco_decode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_String(arr[0]),
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
        arr[1],
      ),
    );
  }

  @protected
  (String, List<UserDefinedKey>)
  dco_decode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
        arr[1],
      ),
    );
  }

  @protected
  (String, List<UserDefinedNode>)
  dco_decode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
        arr[1],
      ),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  InitializedEndpoint
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InitializedEndpointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  UserDefinedKey
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserDefinedKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  UserDefinedNode
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserDefinedNodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InitializedEndpoint
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InitializedEndpointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  UserDefinedKey
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserDefinedKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  UserDefinedNode
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserDefinedNodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InitializedEndpoint
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InitializedEndpointImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  UserDefinedKey
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserDefinedKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  UserDefinedNode
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UserDefinedNodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<UserDefinedKey>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UserDefinedKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<UserDefinedNode>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UserDefinedNode>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String?, List<UserDefinedKey>)
  sse_decode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_String(deserializer);
    var var_field1 =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (String?, List<UserDefinedNode>)
  sse_decode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_String(deserializer);
    var var_field1 =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (String, List<UserDefinedKey>)
  sse_decode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (String, List<UserDefinedNode>)
  sse_decode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    InitializedEndpoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InitializedEndpointImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    UserDefinedKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as UserDefinedKeyImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    UserDefinedNode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as UserDefinedNodeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    InitializedEndpoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InitializedEndpointImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    UserDefinedKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as UserDefinedKeyImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    UserDefinedNode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as UserDefinedNodeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInitializedEndpoint(
    InitializedEndpoint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InitializedEndpointImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    UserDefinedKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as UserDefinedKeyImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    UserDefinedNode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as UserDefinedNodeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
    RustStreamSink<String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
    List<UserDefinedKey> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
    List<UserDefinedNode> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key(
    (String?, List<UserDefinedKey>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.$1, serializer);
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_opt_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node(
    (String?, List<UserDefinedNode>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.$1, serializer);
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_key(
    (String, List<UserDefinedKey>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedKey(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_string_list_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_user_defined_node(
    (String, List<UserDefinedNode>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUserDefinedNode(
      self.$2,
      serializer,
    );
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class InitializedEndpointImpl extends RustOpaque
    implements InitializedEndpoint {
  // Not to be used by end users
  InitializedEndpointImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InitializedEndpointImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_InitializedEndpoint,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_InitializedEndpoint,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_InitializedEndpointPtr,
  );

  void cancelStream() => RustLib.instance.api
      .crateApiEndpointInitializedEndpointCancelStream(that: this);

  Future<void> destroy() => RustLib.instance.api
      .crateApiEndpointInitializedEndpointDestroy(that: this);

  Future<PlatformInt64> execPing({required UserDefinedNode address}) =>
      RustLib.instance.api.crateApiEndpointInitializedEndpointExecPing(
        that: this,
        address: address,
      );

  Stream<String> serveRemoteTcp({
    required int port,
    required UserDefinedNode address,
    String? namedPort,
  }) => RustLib.instance.api.crateApiEndpointInitializedEndpointServeRemoteTcp(
    that: this,
    port: port,
    address: address,
    namedPort: namedPort,
  );
}

@sealed
class UserDefinedKeyImpl extends RustOpaque implements UserDefinedKey {
  // Not to be used by end users
  UserDefinedKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UserDefinedKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UserDefinedKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserDefinedKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserDefinedKeyPtr,
  );

  String displayLabel() =>
      RustLib.instance.api.crateApiTokensUserDefinedKeyDisplayLabel(that: this);

  String privateKeyHex() => RustLib.instance.api
      .crateApiTokensUserDefinedKeyPrivateKeyHex(that: this);

  String publicKeyHex() =>
      RustLib.instance.api.crateApiTokensUserDefinedKeyPublicKeyHex(that: this);
}

@sealed
class UserDefinedNodeImpl extends RustOpaque implements UserDefinedNode {
  // Not to be used by end users
  UserDefinedNodeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UserDefinedNodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UserDefinedNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserDefinedNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserDefinedNodePtr,
  );

  String address() =>
      RustLib.instance.api.crateApiTokensUserDefinedNodeAddress(that: this);

  String displayLabel() => RustLib.instance.api
      .crateApiTokensUserDefinedNodeDisplayLabel(that: this);
}
