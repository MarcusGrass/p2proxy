// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `serialize_many`, `serialize_many`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserDefinedKey>>
abstract class UserDefinedKey implements RustOpaqueInterface {
  static Future<(String, List<UserDefinedKey>)> addAndSerialize({
    required List<UserDefinedKey> many,
    required UserDefinedKey tgt,
  }) => RustLib.instance.api.crateApiTokensUserDefinedKeyAddAndSerialize(
    many: many,
    tgt: tgt,
  );

  static Future<List<UserDefinedKey>> deserializeMany({required String s}) =>
      RustLib.instance.api.crateApiTokensUserDefinedKeyDeserializeMany(s: s);

  String displayLabel();

  static String generateKey() =>
      RustLib.instance.api.crateApiTokensUserDefinedKeyGenerateKey();

  static UserDefinedKey generateWithName({String? name}) => RustLib.instance.api
      .crateApiTokensUserDefinedKeyGenerateWithName(name: name);

  String privateKeyHex();

  String publicKeyHex();

  static Future<(String?, List<UserDefinedKey>)> removeAndSerializeIfPresent({
    required List<UserDefinedKey> many,
    required UserDefinedKey tgt,
  }) => RustLib.instance.api
      .crateApiTokensUserDefinedKeyRemoveAndSerializeIfPresent(
        many: many,
        tgt: tgt,
      );

  static UserDefinedKey tryNew({required String rawHex, String? name}) =>
      RustLib.instance.api.crateApiTokensUserDefinedKeyTryNew(
        rawHex: rawHex,
        name: name,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserDefinedNode>>
abstract class UserDefinedNode implements RustOpaqueInterface {
  static Future<(String, List<UserDefinedNode>)> addAndSerialize({
    required List<UserDefinedNode> many,
    required UserDefinedNode tgt,
  }) => RustLib.instance.api.crateApiTokensUserDefinedNodeAddAndSerialize(
    many: many,
    tgt: tgt,
  );

  String address();

  static Future<List<UserDefinedNode>> deserializeMany({required String s}) =>
      RustLib.instance.api.crateApiTokensUserDefinedNodeDeserializeMany(s: s);

  String displayLabel();

  static Future<(String?, List<UserDefinedNode>)> removeAndSerializeIfPresent({
    required List<UserDefinedNode> many,
    required UserDefinedNode tgt,
  }) => RustLib.instance.api
      .crateApiTokensUserDefinedNodeRemoveAndSerializeIfPresent(
        many: many,
        tgt: tgt,
      );

  static UserDefinedNode tryNew({required String nodeId, String? name}) =>
      RustLib.instance.api.crateApiTokensUserDefinedNodeTryNew(
        nodeId: nodeId,
        name: name,
      );
}
